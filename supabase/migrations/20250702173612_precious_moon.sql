/*
  # Create events table with Spanish column names

  1. New Tables
    - `events`
      - `id` (bigint, primary key, auto-increment)
      - `nombre` (text, event name)
      - `lugar` (text, venue/location)
      - `fecha` (text, date and time)
      - `enlace` (text, event link, optional)
      - `distancia` (numeric, distance in km, optional)
      - `latitude` (numeric, venue latitude, optional)
      - `longitude` (numeric, venue longitude, optional)
      - `created_at` (timestamptz, creation timestamp)
      - `updated_at` (timestamptz, update timestamp)

  2. Security
    - Enable RLS on `events` table
    - Add policy for public access to all operations

  3. Indexes
    - Primary key on `id`
    - Indexes on `nombre`, `lugar`, `fecha`, `distancia` for performance
*/

-- Create the events table with Spanish column names
CREATE TABLE IF NOT EXISTS events (
  id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  nombre text NOT NULL,
  lugar text NOT NULL,
  fecha text NOT NULL,
  enlace text,
  distancia numeric(10,2),
  latitude numeric(10,8),
  longitude numeric(11,8),
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- Enable Row Level Security
ALTER TABLE events ENABLE ROW LEVEL SECURITY;

-- Create policy for public access (matching your existing setup)
CREATE POLICY "Allow all operations on events"
  ON events
  FOR ALL
  TO public
  USING (true)
  WITH CHECK (true);

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_events_nombre ON events USING btree (nombre);
CREATE INDEX IF NOT EXISTS idx_events_lugar ON events USING btree (lugar);
CREATE INDEX IF NOT EXISTS idx_events_fecha ON events USING btree (fecha);
CREATE INDEX IF NOT EXISTS idx_events_distancia ON events USING btree (distancia);
CREATE INDEX IF NOT EXISTS idx_events_created_at ON events USING btree (created_at);

-- Create a trigger to automatically update the updated_at column
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_events_updated_at
  BEFORE UPDATE ON events
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();